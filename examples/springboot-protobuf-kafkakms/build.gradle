buildscript {
	dependencies {
		classpath "com.google.protobuf:protobuf-gradle-plugin:${rootProject.ext.versions.protobufGradlePlugin}"
	}
}


plugins {
	id "io.spring.dependency-management"
	id "org.springframework.boot"
	id "org.jetbrains.kotlin.jvm"
	id "org.jetbrains.kotlin.plugin.spring"
	id "com.google.protobuf"
}

group = "com.acme"
version = "0.0.1-SNAPSHOT"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

// bug issue: https://github.com/google/protobuf-gradle-plugin/issues/391
configurations.forEach {
	if (it.name.toLowerCase().contains("proto")) {
		it.attributes.attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage.class, "java-runtime"))
	}
}


dependencies {
	implementation(project(":schema-providers-protobuf"))
	implementation(project(":serialization-adapters-kafka"))

	implementation("com.google.protobuf:protobuf-java:${rootProject.ext.versions.protobufJava}")

	implementation("io.confluent:kafka-protobuf-serializer:7.5.3")

	implementation("org.springframework.boot:spring-boot-starter-webflux")
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
	implementation("io.projectreactor.kotlin:reactor-kotlin-extensions")
	implementation("org.apache.kafka:kafka-streams")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")
	implementation("org.springframework.kafka:spring-kafka")

	testImplementation("org.springframework.boot:spring-boot-starter-test") {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation("io.projectreactor:reactor-test")
	testImplementation("org.springframework.kafka:spring-kafka-test")

	testImplementation("org.springframework.boot:spring-boot-testcontainers")

	testImplementation("org.testcontainers:testcontainers:1.20.6")
	testImplementation("org.testcontainers:junit-jupiter:1.20.6")
	testImplementation ("org.testcontainers:redpanda:1.20.6")
}



compileKotlin {
	kotlinOptions.freeCompilerArgs = ["-Xjsr305=strict"]
	kotlinOptions.jvmTarget = "17"
}


protobuf {
	protoc {
		// Download from repositories
		artifact = "com.google.protobuf:protoc:${rootProject.ext.versions.protoc}"
	}
}

spotbugs {
	onlyAnalyze = ['com.acme.sample.*']
}