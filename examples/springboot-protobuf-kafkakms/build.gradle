buildscript {
	dependencies {
		classpath libs.protobuf.gradle.plugin
	}
}


plugins {
	alias(exampleLibs.plugins.spring.dependency.management)
	alias(exampleLibs.plugins.spring.boot)
	alias(exampleLibs.plugins.kotlin.jvm)
	alias(exampleLibs.plugins.kotlin.spring)
	alias(libs.plugins.protobuf)
}

group = "com.acme"
version = "0.0.1-SNAPSHOT"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

// bug issue: https://github.com/google/protobuf-gradle-plugin/issues/391
configurations.forEach {
	if (it.name.toLowerCase().contains("proto")) {
		it.attributes.attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage.class, "java-runtime"))
	}
}


dependencies {
	implementation(project(":schema-providers-protobuf"))
	implementation(project(":serialization-adapters-kafka"))

	implementation libs.protobuf.java

	implementation libs.confluent.kafka.protobuf.serializer

	implementation exampleLibs.spring.boot.starter.webflux
	implementation exampleLibs.jackson.module.kotlin
	implementation exampleLibs.reactor.kotlin.extensions
	implementation libs.kafka.streams
	implementation exampleLibs.kotlin.reflect
	implementation exampleLibs.kotlin.stdlib.jdk8
	implementation exampleLibs.kotlinx.coroutines.reactor
	implementation exampleLibs.spring.kafka

	testImplementation(exampleLibs.spring.boot.starter.test) {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation exampleLibs.reactor.test
	testImplementation exampleLibs.spring.kafka.test

	testImplementation exampleLibs.spring.boot.testcontainers

	testImplementation libs.bundles.testcontainers
}



compileKotlin {
	kotlinOptions.freeCompilerArgs = ["-Xjsr305=strict"]
	kotlinOptions.jvmTarget = "17"
}


protobuf {
	protoc {
		// Download from repositories
		artifact = "com.google.protobuf:protoc:${libs.versions.protoc.get()}"
	}
}

spotbugs {
	onlyAnalyze = ['com.acme.sample.*']
}