buildscript {
	dependencies {
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.19'
	}
}


plugins {
	id("org.springframework.boot") version "2.7.2"
	id("io.spring.dependency-management") version "1.0.12.RELEASE"
	id("org.jetbrains.kotlin.jvm") version '1.8.22'
	id("org.jetbrains.kotlin.plugin.spring") version '1.8.22'
	id("com.google.protobuf") version "0.8.19"
}

group = "com.acme"
version = "0.0.1-SNAPSHOT"


// bug issue: https://github.com/google/protobuf-gradle-plugin/issues/391
configurations.forEach {
	if (it.name.toLowerCase().contains("proto")) {
		it.attributes.attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage.class, "java-runtime"))
	}
}


dependencies {
	implementation(project(":serialization-kafka-protobuf"))
	implementation(project(":schema-providers-protobuf"))

	implementation("com.google.protobuf:protobuf-java:3.21.7")

	implementation("io.confluent:kafka-protobuf-serializer:7.2.1")

	implementation('org.springframework.boot:spring-boot-starter-log4j2')
	implementation("org.springframework.boot:spring-boot-starter-webflux")
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
	implementation("io.projectreactor.kotlin:reactor-kotlin-extensions")
	implementation("org.apache.kafka:kafka-streams")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")
	implementation("org.springframework.kafka:spring-kafka")

	testImplementation("org.springframework.boot:spring-boot-starter-test") {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation("io.projectreactor:reactor-test")
	testImplementation("org.springframework.kafka:spring-kafka-test")

	testImplementation("org.testcontainers:testcontainers:1.15.1")
	testImplementation("org.testcontainers:junit-jupiter:1.17.3")
	testImplementation("org.testcontainers:kafka:1.15.1")
}

configurations {
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		exclude group: 'ch.qos.logback', module: 'logback-classic'
		exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
	}
}



compileKotlin {
	kotlinOptions.freeCompilerArgs = ["-Xjsr305=strict"]
	kotlinOptions.jvmTarget = "11"
}


protobuf {
	protoc {
		// Download from repositories
		artifact = "com.google.protobuf:protoc:3.21.0"
	}
}

spotbugs {
	onlyAnalyze = ['com.acme.sample.*']
}