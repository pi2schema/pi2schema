logging.level.com.acme=DEBUG
logging.level.org.apache=INFO

spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer
spring.kafka.producer.properties.interceptor.classes=pi2schema.serialization.kafka.KafkaGdprAwareProducerInterceptor

spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.json.KafkaJsonSchemaDeserializer
spring.kafka.consumer.properties.interceptor.classes=pi2schema.serialization.kafka.KafkaGdprAwareConsumerInterceptor

spring.kafka.properties.schema.registry.url=http://localhost:8081/
spring.kafka.properties.json.value.type=com.acme.model.FarmerRegisteredEvent
spring.kafka.properties.json.oneof.for.nullables=false

# Pi2schema configuration
spring.kafka.properties.pi2schema.schema.definition.provider=pi2schema.serialization.kafka.jsonschema.KafkaJsonSchemaProvider
spring.kafka.properties.pi2schema.personal.metadata.provider=pi2schema.schema.providers.jsonschema.personaldata.JsonSchemaPersonalMetadataProvider

# Vault Materials Provider Configuration
spring.kafka.properties.pi2schema.personal.materials.provider=pi2schema.serialization.kafka.materials.VaultMaterialsProvider
spring.kafka.properties.pi2schema.vault.url=${VAULT_URL:https://localhost:8200}
spring.kafka.properties.pi2schema.vault.token=${VAULT_TOKEN:}
spring.kafka.properties.pi2schema.vault.provider.type=encrypting
spring.kafka.properties.pi2schema.vault.transit.engine.path=transit
spring.kafka.properties.pi2schema.vault.key.prefix=pi2schema-jsonschema-example
spring.kafka.properties.pi2schema.vault.connection.timeout.ms=10000
spring.kafka.properties.pi2schema.vault.request.timeout.ms=30000
spring.kafka.properties.pi2schema.vault.max.retries=3
spring.kafka.properties.pi2schema.vault.retry.backoff.ms=100

debug=true
