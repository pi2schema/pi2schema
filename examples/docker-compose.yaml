version: '3.7'
name: pi2schema-examples
networks:
  redpanda_network:
    driver: bridge

services:
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v25.2.2
    command:
      - redpanda start
      - --smp 1
      - --mode dev-container
      - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
      - --pandaproxy-addr 0.0.0.0:8082
      - --advertise-pandaproxy-addr localhost:8082
    ports:
      - 8081:8081
      - 8082:8082
      - 9092:9092
      - 9644:9644
      - 29092:29092
    networks:
      - redpanda_network
    healthcheck:
      test: [ "CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1" ]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s

  vault:
    image: hashicorp/vault:1.20
    container_name: vault-dev
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroot
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://0.0.0.0:8200
      VAULT_API_ADDR: http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    command: vault server -dev -dev-listen-address=0.0.0.0:8200
    networks:
      - redpanda_network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  vault-init:
    image: hashicorp/vault:1.20
    container_name: vault-init
    depends_on:
      vault:
        condition: service_healthy
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: myroot
    networks:
      - redpanda_network
    command:
      - sh
      - -c
      - |
        echo "🔐 Initializing Vault for Pi2Schema examples..."
        
        # Wait a bit more for Vault to be fully ready
        sleep 5
        
        # Enable transit secrets engine
        echo "🔑 Enabling transit secrets engine..."
        vault secrets enable transit || echo "Transit engine already enabled"
        
        # Create pi2schema policy using a temporary file
        echo "📋 Creating pi2schema policy..."
        cat > /tmp/pi2schema-policy.hcl << 'POLICY_EOF'
        path "transit/encrypt/pi2schema-*" {
          capabilities = ["create", "update"]
        }
        
        path "transit/decrypt/pi2schema-*" {
          capabilities = ["create", "update"]
        }
        
        path "transit/keys/pi2schema-*" {
          capabilities = ["create", "read", "update", "delete"]
        }
        
        path "transit/keys" {
          capabilities = ["list"]
        }
        POLICY_EOF
        
        vault policy write pi2schema-policy /tmp/pi2schema-policy.hcl
        
        # Test the setup
        echo "🧪 Testing Vault setup..."
        test_key="pi2schema-test_subject_test-user"
        vault write -f "transit/keys/$${test_key}" > /dev/null
        
        # Test encryption/decryption
        encrypted=$$(vault write -field=ciphertext "transit/encrypt/$${test_key}" plaintext=$$(echo -n "Hello Pi2Schema" | base64))
        decrypted=$$(vault write -field=plaintext "transit/decrypt/$${test_key}" ciphertext="$${encrypted}" | base64 -d)
        
        if [ "$${decrypted}" = "Hello Pi2Schema" ]; then
          echo "✅ Vault encryption/decryption test successful"
        else
          echo "❌ Vault test failed"
          exit 1
        fi
        
        # Clean up test key
        vault delete "transit/keys/$${test_key}" > /dev/null
        
        echo "🎉 Vault initialization complete!"
        echo "Environment variables for examples:"
        echo "  VAULT_URL=http://localhost:8200"
        echo "  VAULT_TOKEN=myroot"
    restart: "no"

  console:
    image: docker.redpanda.com/redpandadata/console:v3.2.1
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:29092"]
        schemaRegistry:
          enabled: true
          urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]

    ports:
      - 9080:8080
    networks:
      - redpanda_network
    depends_on:
      - redpanda
      - vault-init