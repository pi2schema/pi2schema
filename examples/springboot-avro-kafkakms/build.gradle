plugins {
	id("io.spring.dependency-management") version "1.1.3"
	id("org.springframework.boot") version "3.1.5"
	id("org.jetbrains.kotlin.jvm") version '1.9.20'
	id("org.jetbrains.kotlin.plugin.spring") version '1.8.22'
	id "com.github.davidmc24.gradle.plugin.avro" version "1.9.1"
}


group = "com.acme"
version = "0.0.2-SNAPSHOT"



java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}


dependencies {
	implementation(project(":schema-providers-avro"))
	implementation(project(":serialization-kafka-avro"))

	implementation("io.confluent:kafka-avro-serializer:7.5.1")
	implementation 'org.apache.avro:avro:1.11.3'
	implementation("org.springframework.boot:spring-boot-starter-webflux")
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
	implementation("io.projectreactor.kotlin:reactor-kotlin-extensions")
	implementation("org.apache.kafka:kafka-streams")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")
	implementation("org.springframework.kafka:spring-kafka")

	testImplementation("org.springframework.boot:spring-boot-starter-test") {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation("io.projectreactor:reactor-test")
	testImplementation("org.springframework.kafka:spring-kafka-test")

	testImplementation("org.springframework.boot:spring-boot-testcontainers")

	testImplementation("org.testcontainers:testcontainers:1.19.1")
	testImplementation("org.testcontainers:junit-jupiter:1.19.1")
	testImplementation ("org.testcontainers:redpanda:1.19.1")
}


compileKotlin {
	dependsOn(":examples:springboot-avro-kafkakms:generateTestAvroJava")
	kotlinOptions.freeCompilerArgs = ["-Xjsr305=strict"]
	kotlinOptions.jvmTarget = "17"
}


spotbugs {
	onlyAnalyze = ['com.acme.sample.*']
}
