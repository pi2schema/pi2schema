plugins {
    id 'net.researchgate.release' version '3.0.2'
    id "com.github.spotbugs" version "5.2.1" apply false
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'idea'
//    apply plugin: 'jacoco'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'maven-publish'

    group 'com.github.pi2schema'
    version project.version

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    repositories {
        mavenCentral()

        //confluent jars are found on mavencentral but pom descriptors are missing causing gradle to fail
        maven { url 'https://packages.confluent.io/maven/' }
    }
}

subprojects {

    dependencies {

        implementation 'ch.qos.logback:logback-classic:1.4.4'

        testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.0'
        testImplementation 'org.assertj:assertj-core:3.24.2'
        testImplementation 'org.apache.commons:commons-lang3:3.12.0'
        testImplementation 'org.awaitility:awaitility:4.2.0'
        testImplementation 'org.mockito:mockito-core:5.6.0'
        testImplementation 'org.mockito:mockito-junit-jupiter:5.7.0'

    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

// do not run spot bugs on test for the time being
    spotbugsTest {
        enabled false
    }

    spotbugs {
        // https://github.com/spotbugs/spotbugs-gradle-plugin#readme
        ignoreFailures = true // will not crash the build
    }

	publishing {
		repositories {
			maven {
				name = "GitHubPackages"
				url = uri("https://maven.pkg.github.com/pi2schema/pi2schema")
				credentials {
					username = System.getenv("GITHUB_ACTOR")
					password = System.getenv("GITHUB_TOKEN")
				}
			}
		}
		publications {
			gpr(MavenPublication) {
				from(components.java)
			}
		}
	}
}

//task codeCoverageReport(type: JacocoReport) {
//    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
//
//    subprojects.each {
//        sourceSets it.sourceSets.main
//    }
//}
//
//tasks.test {
//    finalizedBy(tasks.codeCoverageReport) // report is always generated after tests run
//}

//check.dependsOn codeCoverageReport